// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CareTend_Desktop_HMEOrders_AddNewWithCompletion
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Log into all companies of CareTend.
        /// </summary>
        public void AllCompanyLogin()
        {
            #region Variable Declarations
            WpfButton uIContinueButton = this.UICompanyLoginWindow.UIContinueButton;
            #endregion

            // Launch '%ProgramW6432%\Mediware Information Systems\CareTend Client\CareTend_Classic_Standard (1601)\CareTend.exe'
            ApplicationUnderTest uICompanyLoginWindow = ApplicationUnderTest.Launch(this.AllCompanyLoginParams.UICompanyLoginWindowExePath, this.AllCompanyLoginParams.UICompanyLoginWindowAlternateExePath);

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(48, 10));
        }
        
        /// <summary>
        /// Select the patient to work with.
        /// </summary>
        public void PatientSelectionMethod()
        {
            #region Variable Declarations
            WpfMenuItem uIRogerHoward1MenuItem = this.UICareTendWindow.UIRadMenuMenu.UIRecentMenuItem.UIClinicalPatientsMenuItem.UIRogerHoward1MenuItem;
            #endregion

            // Click 'Recent' -> 'Clinical Patients' -> 'Roger Howard 1' menu item
            Mouse.Click(uIRogerHoward1MenuItem, new Point(55, 11));
        }
        
        /// <summary>
        /// Navigate to the patient's orders.
        /// </summary>
        public void NavigateToOrdersMethod()
        {
            #region Variable Declarations
            WpfHyperlink uIOrdersHyperlink = this.UICareTendWindow.UIMenuExpander.UIOrdersText.UIOrdersHyperlink;
            #endregion

            // Click 'Orders' link
            Mouse.Click(uIOrdersHyperlink, new Point(14, 6));
        }
        
        /// <summary>
        /// Open a new HME order form.
        /// </summary>
        public void AddHMEOrder()
        {
            #region Variable Declarations
            WpfHyperlink uIAddHMEOrderHyperlink = this.UICareTendWindow.UIActivitiesExpander.UIAddHMEOrderText.UIAddHMEOrderHyperlink;
            #endregion

            // Click 'Add HME Order' link
            Mouse.Click(uIAddHMEOrderHyperlink, new Point(29, 8));
        }
        
        /// <summary>
        /// Searching for an HME supply item.
        /// </summary>
        public void InventorySearchMethod()
        {
            #region Variable Declarations
            WpfButton uIInventoryItem_ButtonButton = this.UICareTendWindow.UIItemCustom.UIInventoryItemEdit.UIInventoryItem_ButtonButton;
            WpfEdit uIItemNameEdit = this.UICareTendWindow.UIItemNameEdit;
            WpfCheckBox uISupplyCheckBox = this.UICareTendWindow.UISupplyCheckBox;
            WpfButton uIApplyButton = this.UICareTendWindow.UIApplyButton;
            #endregion

            // Click 'InventoryItem_Button' button
            Mouse.Click(uIInventoryItem_ButtonButton, new Point(6, 3));

            // Type 'rh' in 'ItemName' text box
            uIItemNameEdit.Text = this.InventorySearchMethodParams.UIItemNameEditText;

            // Select 'Supply' check box
            uISupplyCheckBox.Checked = this.InventorySearchMethodParams.UISupplyCheckBoxChecked;

            // Click 'Apply' button
            Mouse.Click(uIApplyButton, new Point(19, 7));
        }
        
        /// <summary>
        /// Selecting the inventory item from the grid.
        /// </summary>
        public void InventoryItemSelection()
        {
            #region Variable Declarations
            WpfCell uIRHAlcoholPrepPadLTCell = this.UICareTendWindow.UIItemCustom1.UIDgResultsTable.UIRow_5Row.UIRHAlcoholPrepPadLTCell;
            #endregion

            // Type '{Enter}' in 'RH - Alcohol Prep Pad - LT' cell
            Keyboard.SendKeys(uIRHAlcoholPrepPadLTCell, this.InventoryItemSelectionParams.UIRHAlcoholPrepPadLTCellSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Setting the quantity for the ordered item and marking the order complete.
        /// </summary>
        public void MarkingOrderCompleteMethod()
        {
            #region Variable Declarations
            WpfEdit uIQuantityEdit = this.UICareTendWindow.UIQuantityEdit;
            WpfHyperlink uIMarkOrderCompleteHyperlink = this.UICareTendWindow.UIActivitiesExpander.UIMarkOrderCompleteText.UIMarkOrderCompleteHyperlink;
            WpfButton uIYesButton = this.UICareTendWindow.UIYesButton;
            #endregion

            // Checking the Therapy Type
            Keyboard.SendKeys(UICareTendWindow.UITherapyTypeComboBox, "HME");

            // Type '30' in 'Quantity' text box
            uIQuantityEdit.Text = this.MarkingOrderCompleteMethodParams.UIQuantityEditText;

            // Click 'Mark Order Complete' link
            Mouse.Click(uIMarkOrderCompleteHyperlink, new Point(70, 6));

            // Click 'Yes' button
            Mouse.Click(uIYesButton, new Point(13, 13));
        }
        
        /// <summary>
        /// Close the patient's orders window.
        /// </summary>
        public void CloseOrdersWindowMethod()
        {
            #region Variable Declarations
            WpfButton uISaveCloseButton = this.UICareTendWindow.UISaveCloseButton;
            #endregion

            // Click 'Save & Close' button
            Mouse.Click(uISaveCloseButton, new Point(23, 4));
        }
        
        /// <summary>
        /// Close the patient's record.
        /// </summary>
        public void ClosePatientRecordMethod()
        {
            #region Variable Declarations
            WpfButton uICloseButton = this.UICareTendWindow.UICloseButton;
            #endregion

            // Click 'Close' button
            Mouse.Click(uICloseButton, new Point(19, 8));
        }
        
        /// <summary>
        /// Close the CareTend application.
        /// </summary>
        public void CloseCareTendMethod()
        {
            #region Variable Declarations
            WpfButton uIItemButton = this.UICareTendWindow.UIItemButton;
            #endregion

            // Click button numbered 6 in 'CareTend' window
            Mouse.Click(uIItemButton, new Point(21, 13));
        }
        
        #region Properties
        public virtual AllCompanyLoginParams AllCompanyLoginParams
        {
            get
            {
                if ((this.mAllCompanyLoginParams == null))
                {
                    this.mAllCompanyLoginParams = new AllCompanyLoginParams();
                }
                return this.mAllCompanyLoginParams;
            }
        }
        
        public virtual InventorySearchMethodParams InventorySearchMethodParams
        {
            get
            {
                if ((this.mInventorySearchMethodParams == null))
                {
                    this.mInventorySearchMethodParams = new InventorySearchMethodParams();
                }
                return this.mInventorySearchMethodParams;
            }
        }
        
        public virtual InventoryItemSelectionParams InventoryItemSelectionParams
        {
            get
            {
                if ((this.mInventoryItemSelectionParams == null))
                {
                    this.mInventoryItemSelectionParams = new InventoryItemSelectionParams();
                }
                return this.mInventoryItemSelectionParams;
            }
        }
        
        public virtual MarkingOrderCompleteMethodParams MarkingOrderCompleteMethodParams
        {
            get
            {
                if ((this.mMarkingOrderCompleteMethodParams == null))
                {
                    this.mMarkingOrderCompleteMethodParams = new MarkingOrderCompleteMethodParams();
                }
                return this.mMarkingOrderCompleteMethodParams;
            }
        }
        
        public UICompanyLoginWindow UICompanyLoginWindow
        {
            get
            {
                if ((this.mUICompanyLoginWindow == null))
                {
                    this.mUICompanyLoginWindow = new UICompanyLoginWindow();
                }
                return this.mUICompanyLoginWindow;
            }
        }
        
        public UICareTendWindow UICareTendWindow
        {
            get
            {
                if ((this.mUICareTendWindow == null))
                {
                    this.mUICareTendWindow = new UICareTendWindow();
                }
                return this.mUICareTendWindow;
            }
        }
        #endregion
        
        #region Fields
        private AllCompanyLoginParams mAllCompanyLoginParams;
        
        private InventorySearchMethodParams mInventorySearchMethodParams;
        
        private InventoryItemSelectionParams mInventoryItemSelectionParams;
        
        private MarkingOrderCompleteMethodParams mMarkingOrderCompleteMethodParams;
        
        private UICompanyLoginWindow mUICompanyLoginWindow;
        
        private UICareTendWindow mUICareTendWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AllCompanyLogin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AllCompanyLoginParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%ProgramW6432%\Mediware Information Systems\CareTend Client\CareTend_Classic_Standard (1601)\CareTend.exe'
        /// </summary>
        public string UICompanyLoginWindowExePath = "C:\\Program Files\\Mediware Information Systems\\CareTend Client\\CareTend_Classic_St" +
            "andard (1601)\\CareTend.exe";
        
        /// <summary>
        /// Launch '%ProgramW6432%\Mediware Information Systems\CareTend Client\CareTend_Classic_Standard (1601)\CareTend.exe'
        /// </summary>
        public string UICompanyLoginWindowAlternateExePath = "%ProgramW6432%\\Mediware Information Systems\\CareTend Client\\CareTend_Classic_Stan" +
            "dard (1601)\\CareTend.exe";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InventorySearchMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class InventorySearchMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'rh' in 'ItemName' text box
        /// </summary>
        public string UIItemNameEditText = "rh";
        
        /// <summary>
        /// Select 'Supply' check box
        /// </summary>
        public bool UISupplyCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'InventoryItemSelection'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class InventoryItemSelectionParams
    {
        
        #region Fields
        /// <summary>
        /// Type '{Enter}' in 'RH - Alcohol Prep Pad - LT' cell
        /// </summary>
        public string UIRHAlcoholPrepPadLTCellSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'MarkingOrderCompleteMethod'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class MarkingOrderCompleteMethodParams
    {
        
        #region Fields
        /// <summary>
        /// Type '30' in 'Quantity' text box
        /// </summary>
        public string UIQuantityEditText = "30";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICompanyLoginWindow : WpfWindow
    {
        
        public UICompanyLoginWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Company Login";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Company Login");
            #endregion
        }
        
        #region Properties
        public WpfButton UIContinueButton
        {
            get
            {
                if ((this.mUIContinueButton == null))
                {
                    this.mUIContinueButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIContinueButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnSubmit";
                    this.mUIContinueButton.WindowTitles.Add("Company Login");
                    #endregion
                }
                return this.mUIContinueButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIContinueButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UICareTendWindow : WpfWindow
    {
        
        public UICareTendWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "CareTend";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("CareTend");
            #endregion
        }
        
        #region Properties
        public UIRadMenuMenu UIRadMenuMenu
        {
            get
            {
                if ((this.mUIRadMenuMenu == null))
                {
                    this.mUIRadMenuMenu = new UIRadMenuMenu(this);
                }
                return this.mUIRadMenuMenu;
            }
        }
        
        public UIMenuExpander UIMenuExpander
        {
            get
            {
                if ((this.mUIMenuExpander == null))
                {
                    this.mUIMenuExpander = new UIMenuExpander(this);
                }
                return this.mUIMenuExpander;
            }
        }
        
        public UIActivitiesExpander UIActivitiesExpander
        {
            get
            {
                if ((this.mUIActivitiesExpander == null))
                {
                    this.mUIActivitiesExpander = new UIActivitiesExpander(this);
                }
                return this.mUIActivitiesExpander;
            }
        }
        
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public WpfEdit UIItemNameEdit
        {
            get
            {
                if ((this.mUIItemNameEdit == null))
                {
                    this.mUIItemNameEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIItemNameEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "ItemName";
                    this.mUIItemNameEdit.WindowTitles.Add("CareTend");
                    #endregion
                }
                return this.mUIItemNameEdit;
            }
        }
        
        public WpfCheckBox UISupplyCheckBox
        {
            get
            {
                if ((this.mUISupplyCheckBox == null))
                {
                    this.mUISupplyCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUISupplyCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "Supply";
                    this.mUISupplyCheckBox.WindowTitles.Add("CareTend");
                    #endregion
                }
                return this.mUISupplyCheckBox;
            }
        }
        
        public WpfButton UIApplyButton
        {
            get
            {
                if ((this.mUIApplyButton == null))
                {
                    this.mUIApplyButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIApplyButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnSearch";
                    this.mUIApplyButton.WindowTitles.Add("CareTend");
                    #endregion
                }
                return this.mUIApplyButton;
            }
        }
        
        public UIItemCustom1 UIItemCustom1
        {
            get
            {
                if ((this.mUIItemCustom1 == null))
                {
                    this.mUIItemCustom1 = new UIItemCustom1(this);
                }
                return this.mUIItemCustom1;
            }
        }
        
        public WpfEdit UIQuantityEdit
        {
            get
            {
                if ((this.mUIQuantityEdit == null))
                {
                    this.mUIQuantityEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIQuantityEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Quantity";
                    this.mUIQuantityEdit.WindowTitles.Add("CareTend");
                    #endregion
                }
                return this.mUIQuantityEdit;
            }
        }
        
        public WpfButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btn0";
                    this.mUIYesButton.WindowTitles.Add("CareTend");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        
        public WpfButton UISaveCloseButton
        {
            get
            {
                if ((this.mUISaveCloseButton == null))
                {
                    this.mUISaveCloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUISaveCloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnFramerSave";
                    this.mUISaveCloseButton.WindowTitles.Add("CareTend");
                    #endregion
                }
                return this.mUISaveCloseButton;
            }
        }
        
        public WpfButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnFramerClose";
                    this.mUICloseButton.WindowTitles.Add("CareTend");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.Instance] = "6";
                    this.mUIItemButton.WindowTitles.Add("CareTend");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfComboBox UITherapyTypeComboBox
        {
            get
            {
                if ((this.mUITherapyTypeComboBox == null))
                {
                    this.mUITherapyTypeComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUITherapyTypeComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "TherapyType";
                    this.mUITherapyTypeComboBox.WindowTitles.Add("CareTend");
                    #endregion
                }
                return this.mUITherapyTypeComboBox;
            }
        }
        #endregion
        
        #region Fields
        private UIRadMenuMenu mUIRadMenuMenu;
        
        private UIMenuExpander mUIMenuExpander;
        
        private UIActivitiesExpander mUIActivitiesExpander;
        
        private UIItemCustom mUIItemCustom;
        
        private WpfEdit mUIItemNameEdit;
        
        private WpfCheckBox mUISupplyCheckBox;
        
        private WpfButton mUIApplyButton;
        
        private UIItemCustom1 mUIItemCustom1;
        
        private WpfEdit mUIQuantityEdit;
        
        private WpfButton mUIYesButton;
        
        private WpfButton mUISaveCloseButton;
        
        private WpfButton mUICloseButton;
        
        private WpfButton mUIItemButton;
        
        private WpfComboBox mUITherapyTypeComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRadMenuMenu : WpfMenu
    {
        
        public UIRadMenuMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "_mainMenu";
            this.WindowTitles.Add("CareTend");
            #endregion
        }
        
        #region Properties
        public UIRecentMenuItem UIRecentMenuItem
        {
            get
            {
                if ((this.mUIRecentMenuItem == null))
                {
                    this.mUIRecentMenuItem = new UIRecentMenuItem(this);
                }
                return this.mUIRecentMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIRecentMenuItem mUIRecentMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRecentMenuItem : WpfMenuItem
    {
        
        public UIRecentMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Recent";
            this.WindowTitles.Add("CareTend");
            #endregion
        }
        
        #region Properties
        public UIClinicalPatientsMenuItem UIClinicalPatientsMenuItem
        {
            get
            {
                if ((this.mUIClinicalPatientsMenuItem == null))
                {
                    this.mUIClinicalPatientsMenuItem = new UIClinicalPatientsMenuItem(this);
                }
                return this.mUIClinicalPatientsMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIClinicalPatientsMenuItem mUIClinicalPatientsMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIClinicalPatientsMenuItem : WpfMenuItem
    {
        
        public UIClinicalPatientsMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Recent - Clinical Patients";
            this.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
            this.WindowTitles.Add("CareTend");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIRogerHoward1MenuItem
        {
            get
            {
                if ((this.mUIRogerHoward1MenuItem == null))
                {
                    this.mUIRogerHoward1MenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIRogerHoward1MenuItem.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "Recent - Roger Howard 1";
                    this.mUIRogerHoward1MenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIRogerHoward1MenuItem.WindowTitles.Add("CareTend");
                    #endregion
                }
                return this.mUIRogerHoward1MenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIRogerHoward1MenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMenuExpander : WpfExpander
    {
        
        public UIMenuExpander(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.AutomationId] = "menuExpander";
            this.WindowTitles.Add("CareTend");
            #endregion
        }
        
        #region Properties
        public UIOrdersText UIOrdersText
        {
            get
            {
                if ((this.mUIOrdersText == null))
                {
                    this.mUIOrdersText = new UIOrdersText(this);
                }
                return this.mUIOrdersText;
            }
        }
        #endregion
        
        #region Fields
        private UIOrdersText mUIOrdersText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOrdersText : WpfText
    {
        
        public UIOrdersText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Orders";
            this.WindowTitles.Add("CareTend");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink UIOrdersHyperlink
        {
            get
            {
                if ((this.mUIOrdersHyperlink == null))
                {
                    this.mUIOrdersHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mUIOrdersHyperlink.SearchProperties[WpfHyperlink.PropertyNames.Name] = "Orders";
                    this.mUIOrdersHyperlink.WindowTitles.Add("CareTend");
                    #endregion
                }
                return this.mUIOrdersHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mUIOrdersHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIActivitiesExpander : WpfExpander
    {
        
        public UIActivitiesExpander(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfExpander.PropertyNames.Name] = "Activities";
            this.WindowTitles.Add("CareTend");
            #endregion
        }
        
        #region Properties
        public UIAddHMEOrderText UIAddHMEOrderText
        {
            get
            {
                if ((this.mUIAddHMEOrderText == null))
                {
                    this.mUIAddHMEOrderText = new UIAddHMEOrderText(this);
                }
                return this.mUIAddHMEOrderText;
            }
        }
        
        public UIMarkOrderCompleteText UIMarkOrderCompleteText
        {
            get
            {
                if ((this.mUIMarkOrderCompleteText == null))
                {
                    this.mUIMarkOrderCompleteText = new UIMarkOrderCompleteText(this);
                }
                return this.mUIMarkOrderCompleteText;
            }
        }
        #endregion
        
        #region Fields
        private UIAddHMEOrderText mUIAddHMEOrderText;
        
        private UIMarkOrderCompleteText mUIMarkOrderCompleteText;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAddHMEOrderText : WpfText
    {
        
        public UIAddHMEOrderText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Add HME Order";
            this.WindowTitles.Add("CareTend");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink UIAddHMEOrderHyperlink
        {
            get
            {
                if ((this.mUIAddHMEOrderHyperlink == null))
                {
                    this.mUIAddHMEOrderHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mUIAddHMEOrderHyperlink.SearchProperties[WpfHyperlink.PropertyNames.Name] = "Add HME Order";
                    this.mUIAddHMEOrderHyperlink.WindowTitles.Add("CareTend");
                    #endregion
                }
                return this.mUIAddHMEOrderHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mUIAddHMEOrderHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMarkOrderCompleteText : WpfText
    {
        
        public UIMarkOrderCompleteText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.Name] = "Mark Order Complete";
            this.WindowTitles.Add("CareTend");
            #endregion
        }
        
        #region Properties
        public WpfHyperlink UIMarkOrderCompleteHyperlink
        {
            get
            {
                if ((this.mUIMarkOrderCompleteHyperlink == null))
                {
                    this.mUIMarkOrderCompleteHyperlink = new WpfHyperlink(this);
                    #region Search Criteria
                    this.mUIMarkOrderCompleteHyperlink.SearchProperties[WpfHyperlink.PropertyNames.Name] = "Mark Order Complete";
                    this.mUIMarkOrderCompleteHyperlink.WindowTitles.Add("CareTend");
                    #endregion
                }
                return this.mUIMarkOrderCompleteHyperlink;
            }
        }
        #endregion
        
        #region Fields
        private WpfHyperlink mUIMarkOrderCompleteHyperlink;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.PatientHMEOrderView";
            this.WindowTitles.Add("CareTend");
            #endregion
        }
        
        #region Properties
        public UIInventoryItemEdit UIInventoryItemEdit
        {
            get
            {
                if ((this.mUIInventoryItemEdit == null))
                {
                    this.mUIInventoryItemEdit = new UIInventoryItemEdit(this);
                }
                return this.mUIInventoryItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private UIInventoryItemEdit mUIInventoryItemEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIInventoryItemEdit : WpfEdit
    {
        
        public UIInventoryItemEdit(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "InventoryItem";
            this.WindowTitles.Add("CareTend");
            #endregion
        }
        
        #region Properties
        public WpfButton UIInventoryItem_ButtonButton
        {
            get
            {
                if ((this.mUIInventoryItem_ButtonButton == null))
                {
                    this.mUIInventoryItem_ButtonButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIInventoryItem_ButtonButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "InventoryItem_Button";
                    this.mUIInventoryItem_ButtonButton.WindowTitles.Add("CareTend");
                    #endregion
                }
                return this.mUIInventoryItem_ButtonButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIInventoryItem_ButtonButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemCustom1 : WpfCustom
    {
        
        public UIItemCustom1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfControl.PropertyNames.ClassName] = "Uia.InventoryLookupPluginView";
            this.WindowTitles.Add("CareTend");
            #endregion
        }
        
        #region Properties
        public UIDgResultsTable UIDgResultsTable
        {
            get
            {
                if ((this.mUIDgResultsTable == null))
                {
                    this.mUIDgResultsTable = new UIDgResultsTable(this);
                }
                return this.mUIDgResultsTable;
            }
        }
        #endregion
        
        #region Fields
        private UIDgResultsTable mUIDgResultsTable;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDgResultsTable : WpfTable
    {
        
        public UIDgResultsTable(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfTable.PropertyNames.AutomationId] = "dgResults";
            this.WindowTitles.Add("CareTend");
            #endregion
        }
        
        #region Properties
        public UIRow_5Row UIRow_5Row
        {
            get
            {
                if ((this.mUIRow_5Row == null))
                {
                    this.mUIRow_5Row = new UIRow_5Row(this);
                }
                return this.mUIRow_5Row;
            }
        }
        #endregion
        
        #region Fields
        private UIRow_5Row mUIRow_5Row;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRow_5Row : WpfRow
    {
        
        public UIRow_5Row(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfRow.PropertyNames.AutomationId] = "Row_5";
            this.SearchConfigurations.Add(SearchConfiguration.AlwaysSearch);
            this.WindowTitles.Add("CareTend");
            #endregion
        }
        
        #region Properties
        public WpfCell UIRHAlcoholPrepPadLTCell
        {
            get
            {
                if ((this.mUIRHAlcoholPrepPadLTCell == null))
                {
                    this.mUIRHAlcoholPrepPadLTCell = new WpfCell(this);
                    #region Search Criteria
                    this.mUIRHAlcoholPrepPadLTCell.SearchProperties[WpfCell.PropertyNames.ColumnHeader] = "Item";
                    this.mUIRHAlcoholPrepPadLTCell.SearchProperties[WpfCell.PropertyNames.AutomationId] = "Cell_5_1";
                    this.mUIRHAlcoholPrepPadLTCell.WindowTitles.Add("CareTend");
                    #endregion
                }
                return this.mUIRHAlcoholPrepPadLTCell;
            }
        }
        #endregion
        
        #region Fields
        private WpfCell mUIRHAlcoholPrepPadLTCell;
        #endregion
    }
}
